#include <stdio.h>
#include <pthread.h>
#include <unistd.h>
#include <stdlib.h>

// Function that will be executed by the thread
void* thread_function(void* arg) {
    printf("Thread started!\n");
    sleep(2);  // Simulate some work
    printf("Thread finished!\n");
    return NULL;
}

int main() {
    pthread_t thread;
    pthread_attr_t attr;

    // Initialize thread attributes to default values
    pthread_attr_init(&attr);

    // Set thread stack size to 1024 KB
    size_t stack_size = 1024 * 1024; // 1 MB
    pthread_attr_setstacksize(&attr, stack_size);

    // Set the thread to be detached (so no need to join)
    pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_DETACHED);

    // Set scheduling policy to FIFO (real-time)
    pthread_attr_setschedpolicy(&attr, SCHED_FIFO);

    // Set thread priority (for FIFO policy)
    struct sched_param sched_param;
    sched_param.sched_priority = 10;  // Set a priority level
    pthread_attr_setschedparam(&attr, &sched_param);

    // Set thread to run on a specific CPU (for demonstration, setting CPU 0)
    cpu_set_t cpuset;
    CPU_ZERO(&cpuset);
    CPU_SET(0, &cpuset);
    pthread_attr_setaffinity_np(&attr, sizeof(cpu_set_t), &cpuset);

    // Create the thread with the specified attributes
    int result = pthread_create(&thread, &attr, thread_function, NULL);
    if (result != 0) {
        perror("pthread_create");
        exit(EXIT_FAILURE);
    }

    // Destroy the attribute object (clean-up)
    pthread_attr_destroy(&attr);

    // Main thread sleeps while the detached thread runs
    sleep(3);
    
    printf("Main thread finished.\n");
    return 0;
}
